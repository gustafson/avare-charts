#!/bin/sh -login
#PBS -l mem=20gb
#PBS -l nodes=1:ppn=4
#PBS -l walltime=1000:00:00
#PBS -m abe 
#PBS -V 
#PBS -N retile
#PBS -e ${PBS_JOBID}.e_${PBS_JOBNAME}
#PBS -o ${PBS_JOBID}.o_${PBS_JOBNAME}

#!/bin/bash
# Copyright (c) 2015, Peter A. Gustafson (peter.gustafson@wmich.edu)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with the
#   distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
# WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

if [[ ${PBS_NODEFILE} ]]; then
    echo ------------------------------------------------------
    NODE=`sort ${PBS_NODEFILE} | uniq`
    HOST=`echo ${PBS_O_HOST} |cut -f1 -d.`
    echo Job is running on node ${NODE} from host ${HOST}
    echo ------------------------------------------------------
    echo PBS: qsub was run on ${PBS_O_HOST}
    echo PBS: originating queue is ${PBS_O_QUEUE}
    echo PBS: executing queue is ${PBS_QUEUE}
    echo PBS: working directory is ${PBS_O_WORKDIR}
    echo PBS: execution mode is ${PBS_ENVIRONMENT}
    echo PBS: job identifier is ${PBS_JOBID}
    echo PBS: job name is ${PBS_JOBNAME}
    echo PBS: node file is ${PBS_NODEFILE}
    echo PBS: current home directory is ${PBS_O_HOME}
    echo PBS: PATH = ${PBS_O_PATH}
    echo ------------------------------------------------------

    NP=$(cat ${PBS_NODEFILE} | wc -l)
    export TMPDIR=/scratch
else
    NP=16
fi

export OMP_NUM_THREADS=${NP}

[[ ${PBS_O_WORKDIR} ]] && cd ${PBS_O_WORKDIR}

OPTIONS1="-w openlayers -c MUAVLLC --no-kml --resume -r lanczos --processes ${NP}" --zoom=10
OPTIONS2="-w openlayers -c MUAVLLC --no-kml --resume -r lanczos" --zoom=10
TIME1="/usr/bin/time -v -o"
TIME2="/usr/bin/time -v --append -o"
MYDIR1=../maps/tiles

rm log.txt
for a in `ls *tif`; do
    b=`basename $a .tif`;
    
    read arg1 arg2 arg3 arg4 <<< `../maps/extract_corners.sh $a | awk '{print $1, $2, $3, $4}'`

    CRIT=`../maps/extract_corners.sh $a | awk '{if ($4 > 75.0) {print 1}}'`
    if [[ $CRIT ]]; then
	echo ${a}: $arg4 too far north do nothing >> log.txt
    else
	CRIT=`../maps/extract_corners.sh $a | awk '{if ($2 > 75.0) {print 1}}'`
	if [[ $CRIT ]]; then
	    CRIT="75.0"
	    echo ${a}: $arg2 too far north fix it to 75.0 >> log.txt
	    echo "gdal_translate -of vrt -a_nodata '0 0 0' -projwin $arg1 $CRIT $arg3 $arg4 -expand rgb ${b}.tif ${b}_1.vrt" >> log.txt
	    gdal_translate -of vrt -a_nodata '0 0 0' -projwin $arg1 $CRIT $arg3 $arg4 -expand rgb ${b}.tif ${b}_1.vrt
	else
	    CRIT=`../maps/extract_corners.sh $a | awk '{if ($2 < -75.0) {print 1}}'`
	    if [[ $CRIT ]]; then
		echo ${a}: $arg2 too far south do nothing >> log.txt
	    else
		CRIT=`../maps/extract_corners.sh $a | awk '{if ($4 < -75.0) {print 1}}'`
		if [[ $CRIT ]]; then
		    CRIT="-75.0"
		    echo ${a}: $arg4 too far south fix it to -75 >> log.txt
		    echo "gdal_translate -of vrt -a_nodata '0 0 0' -projwin $arg1 $arg2 $arg3 $CRIT -expand rgb ${b}.tif ${b}_1.vrt" >> log.txt
		    gdal_translate -of vrt -a_nodata '0 0 0' -projwin $arg1 $arg2 $arg3 $CRIT -expand rgb ${b}.tif ${b}_1.vrt
		else
		    echo "gdal_translate -of vrt -a_nodata '0 0 0' -expand rgb ${b}.tif ${b}_1.vrt" >> log.txt
		    gdal_translate -of vrt -a_nodata '0 0 0' -expand rgb ${b}.tif ${b}_1.vrt
		fi
	    fi
	fi
    fi

    if [[ -f ${b}_1.vrt ]]; then gdalwarp -of vrt -t_srs 'EPSG:900913' ${b}_1.vrt ${b}_2.vrt; fi
    ## 
done 

gdalbuildvrt -resolution highest -overwrite tpc.vrt *_2.vrt
${TIME1} time.txt ${MYDIR1}/gdal2tiles_512_parallel.py -t "Tactical Pilotage Charts" ${OPTIONS1} tpc.vrt ${MYDIR1}/tiles/10
${TIME2} time.txt ${MYDIR1}/gdal2tiles_512_mysingle.py -t "Tactical Pilotage Charts" ${OPTIONS2} tpc.vrt ${MYDIR1}/tiles/10

find ${MYDIR1}/tiles/10 -name "*png"| xargs -n 1 -P ${NP} optipng -preserve -quiet
find ${MYDIR1}/tiles/10 -name "*png"| xargs mogrify -unsharp 3x3 -format jpg -quality 75

## 0 Sectional
## 1 TAC
## 2 WAC
## 3 IFR Low
## 4 IFR High
## 5 IFR Area
## 6 Terrain
## 7 Shaded Relief
## 8 Topographic
## 9 Heli/Other
## 10 TPC
