#!/bin/sh -login
#PBS -l mem=8gb
#PBS -l nodes=1:ppn=8
#PBS -l walltime=1000:00:00
#PBS -m abe 
#PBS -V 
#PBS -N ChartTiling
#PBS -e z-logs/z.${PBS_JOBID}.e_${PBS_JOBNAME}
#PBS -o z-logs/z.${PBS_JOBID}.o_${PBS_JOBNAME}
#PBS -t 0,1,3-5%1

#!/bin/bash
# Copyright (c) 2015, Peter A. Gustafson (peter.gustafson@wmich.edu)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with the
#   distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
# WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

if [[ ${PBS_NODEFILE} ]]; then
    echo ------------------------------------------------------
    NODE=`sort ${PBS_NODEFILE} | uniq`
    HOST=`echo ${PBS_O_HOST} |cut -f1 -d.`
    echo Job is running on node ${NODE} from host ${HOST}
    echo ------------------------------------------------------
    echo PBS: qsub was run on ${PBS_O_HOST}
    echo PBS: originating queue is ${PBS_O_QUEUE}
    echo PBS: executing queue is ${PBS_QUEUE}
    echo PBS: working directory is ${PBS_O_WORKDIR}
    echo PBS: execution mode is ${PBS_ENVIRONMENT}
    echo PBS: job identifier is ${PBS_JOBID}
    echo PBS: job name is ${PBS_JOBNAME}
    echo PBS: node file is ${PBS_NODEFILE}
    echo PBS: current home directory is ${PBS_O_HOME}
    echo PBS: PATH = ${PBS_O_PATH}
    echo ------------------------------------------------------

    NP=$(cat ${PBS_NODEFILE} | wc -l)
    NP=$((NP*2))
    export TMPDIR=/scratch
else
    NP=8
    export PBS_ARRAYID=0
    export TMPDIR=/data/home/pi/gustafson
fi

[[ ${PBS_O_WORKDIR} ]] && cd ${PBS_O_WORKDIR}
CYCLE=$(./cyclenumber.sh)

OPTIONS1="--verbose -w openlayers -c MUAVLLC --no-kml --resume --processes ${NP}"
TIME1="/usr/bin/time -v --append -o"
ARRAY=`echo ${PBS_JOBID} | sed -e s/"\[..\]"/"\[\]"/g -e "s/.cs.wmich.edu//g"`

function myfindwac (){
    ## The purpose of this was to pick every other row and column to label with expired
    find /dev/shm/tiles/2 -name "*png"|
	while IFS=\/ read start dev shm tiles type layer lat img; do
	    lon=$(basename $img .png)
	    if [[ $((($lat + $lon) % 2)) -eq 0 ]]; then
		echo /$dev/$shm/$tiles/$type/$layer/$lat/$img
	    fi
	done
}

function deleteidentical (){
    find $0 -type f |xargs -n1000 -P16 md5sum > /dev/shm/md5sums.txt

    ## Find repetitive images of more than 1000 instances and delete these
    ## cut -f1 -d" " /dev/shm/md5sums.txt |sort|uniq -c |sort -n |awk '{if ($1>1000) print $2, $1}' > /dev/shm/delete.txt
    ## cut -f1 /dev/shm/delete.txt -d" "|xargs -I{} grep {} /dev/shm/md5sums.txt |cut -f3 -d" "|xargs rm

    ## Above bad!!! deletes all white from 3.  This should get only all black
    cut -f1 -d" " /dev/shm/md5sums.txt |sort|uniq -c |sort -n |tail -n1|awk '{print $2}'|xargs -I{} grep {} /dev/shm/md5sums.txt |awk '{print $2}' |xargs rm 
    
    ## gimp `cut -f1 /dev/shm/delete.txt -d" "|xargs -I{} grep -m1 {} /dev/shm/md5sums.txt |cut -f3 -d" "`
    ## for a in `cut -f1 /dev/shm/delete.txt -d" "|xargs -I{} grep -m1 {} /dev/shm/md5sums.txt |cut -f3 -d" "`; do echo $a; convert ${a} -format %c histogram:info:;done

}

function rmemptypng(){
    ## echo $0
    [[ `convert $0 -format '%@' info: 2> /dev/null|cut -c 1-3` == "0x0" ]] && rm $0
}
export -f rmemptypng

if [[ ${PBS_ARRAYID} -eq 0 ]]; then
    rm -f time.sec.txt
    ${TIME1} time.sec.txt ./gdal2tiles_512_parallel.py -t "VFR Sectional" ${OPTIONS1} -z 0-10 -r cubicspline sec-west.vrt /dev/shm/tiles/0
    ${TIME1} time.sec.txt ./gdal2tiles_512_parallel.py -t "VFR Sectional" ${OPTIONS1} -z 0-10 -r cubicspline sec-east.vrt /dev/shm/tiles/0
    rsync -avP /dev/shm/tiles/0/ tiles/0/ # --exclude=*.xml 
    rm -fr /dev/shm/tiles/0
    
elif [[ ${PBS_ARRAYID} -eq 1 ]]; then
    rm -f time.wac.txt
    ${TIME1} time.tac.txt ./gdal2tiles_512_parallel.py -t "VFR Terminal Area" ${OPTIONS1} -z 0-11 -r cubicspline tac.vrt /dev/shm/tiles/1
    rsync -avP /dev/shm/tiles/1/ tiles/1/ # --exclude=*.xml
    rm -fr /dev/shm/tiles/1

elif [[ ${PBS_ARRAYID} -eq 2 ]]; then
    rm -f time.wac.txt
    ${TIME1} time.wac.txt ./gdal2tiles_512_parallel.py -t "VFR World" ${OPTIONS1} -z 0-9 -r cubicspline wac.vrt /dev/shm/tiles/2
    
    ## Remove blank tiles
    find /dev/shm/tiles/2/ -name "*png" |xargs md5sum > md5sums.txt; cut -f 1 -d" " md5sums.txt|sort |uniq -c|sort -n
    grep -e 2416022fedd35f66c3f4272284f0eb71 -e 408f9a687171af1e975e3d9ebc292caa -e 8fc543693de4de3fa5b1e6c353376610 -e 7ee0240fba70752122eb8585edb525ea md5sums.txt|cut -f3 -d" "|xargs rm
    find /dev/shm/tiles/2/ -name "*aux.xml"| xargs rm
    
    ## Mark every other row and column as expired in a checkerboard pattern
    myfindwac | xargs -n 1 -P ${NP} mogrify -gravity center -pointsize 40 -fill white \
		      -draw "fill-opacity 0.20 rotate -45 text 0,0 'Expired'" -stroke red -strokewidth 1 

    rsync -avP /dev/shm/tiles/2/ tiles/2/ --del
    rm -fr /dev/shm/tiles/2
    
elif [[ ${PBS_ARRAYID} -eq 3 ]]; then
    rm -f time.ifr.txt
    ${TIME1} time.ifr.txt ./gdal2tiles_512_parallel.py -t "IFR Enroute Low" ${OPTIONS1} -z 0-10 -r near ifr-east.vrt /dev/shm/tiles/3
    ${TIME1} time.ifr.txt ./gdal2tiles_512_parallel.py -t "IFR Enroute Low" ${OPTIONS1} -z 0-10 -r near ifr-west.vrt /dev/shm/tiles/3
    find /dev/shm/tiles/3 -name "*png"|xargs md5sum|grep 4023a0e7925b07a6be26e2cddb65f0cd|cut -f3 -d" "|xargs rm    rsync -avP --exclude=*.xml /dev/shm/tiles/3/ tiles/3/
    rm -fr /dev/shm/tiles/3

elif [[ ${PBS_ARRAYID} -eq 4 ]]; then
    rm -f time.ifh.txt
    ${TIME1} time.ifh.txt ./gdal2tiles_512_parallel.py -t "IFR Enroute High" ${OPTIONS1} -z 0-9 -r lanczos ifh-east.vrt /dev/shm/tiles/4
    ${TIME1} time.ifh.txt ./gdal2tiles_512_parallel.py -t "IFR Enroute High" ${OPTIONS1} -z 0-9 -r lanczos ifh-west.vrt /dev/shm/tiles/4
    find /dev/shm/tiles/4 -name "*png"|xargs md5sum|grep 4023a0e7925b07a6be26e2cddb65f0cd|cut -f3 -d" "|xargs rm
    rsync -avP --exclude=*.xml /dev/shm/tiles/4/ tiles/4/
    rm -fr /dev/shm/tiles/4

elif [[ ${PBS_ARRAYID} -eq 5 ]]; then
    rm -f time.ifa.txt

    ## The images are sparse, only create those that are necessary
    for vrt in merge/ifa/*vrt; do
	${TIME1} time.ifa.txt ./gdal2tiles_512_parallel.py -t "IFR Area" ${OPTIONS1} -r lanczos ${vrt} -z 7-11 /dev/shm/tiles/5
    done
    
    ## Extend Guam which stands completely isolated
    ${TIME1} time.ifa.txt ./gdal2tiles_512_parallel.py -t "IFR Area" ${OPTIONS1} -r lanczos -z 0-11 merge/ifa/ENR_P01_GUA.vrt /dev/shm/tiles/5
    
    ## Extend the rest... there were a total of 213 images at this level including guam.  ifa.vrt excludes guam
    ${TIME1} time.ifa.txt ./gdal2tiles_512_parallel.py -t "IFR Area" ${OPTIONS1} -r lanczos -z 0-6 ifa.vrt /dev/shm/tiles/5

    find /dev/shm/tiles/5 -name "*png"|xargs md5sum|grep 4023a0e7925b07a6be26e2cddb65f0cd|cut -f3 -d" "|xargs rm
    rsync -avP --exclude=*.xml /dev/shm/tiles/5/ tiles/5/
    rm -fr /dev/shm/tiles/5

    ## This was how level 6 was identified as the key level after creating tiles for individual images
    ## find . -name "*png"|cut -f3- -d/|sort > sorted.txt
    ## find . -name "*png"|cut -f3- -d/|sort -u > uniq.txt 
    ## diff sorted.txt uniq.txt > difference.txt
    ## grep png difference.txt |cut -c3-|sort -u > files.txt
    ## find . -name "*png" |grep -f files.txt |rev|sort|rev|grep .vrt\/6
    
elif [[ ${PBS_ARRAYID} -eq 9 ]]; then
    rm -f time.heli.txt
    ## The images are sparse, only create those that are necessary
    for vrt in `ls merge/hel/*tif | grep -vi -e houston -e losangeles -e EasternLongIsland -e newyork -e USGulfCoast -e Baltimore -e Washington` merge/hel/*3.vrt; do
	${TIME1} time.ifa.txt ./gdal2tiles_512_parallel.py -t "Helicoptor Route Chart" ${OPTIONS1} -r near -z 8-12 ${vrt} /dev/shm/tiles/9
    done
    ## Heli only on change
    ${TIME1} time.heli.txt ./gdal2tiles_512_parallel.py -t "Helicoptor Route Chart" ${OPTIONS1} -r near -z 0-7 heli.vrt /dev/shm/tiles/9   

    find /dev/shm/tiles/9 -name "*png"|xargs md5sum|grep -e a6b0c59ea29fac3637be5b57f5d79130 -e 7ee0240fba70752122eb8585edb525ea -e a5bb30ccd3d4935e77a91bc8aa38319f |cut -f3 -d" "|xargs rm
    rsync -avP --del --exclude=*.xml /dev/shm/tiles/9/ tiles/9/
    rm -fr /dev/shm/tiles/9
    
    ## find . -name "*png"|cut -f3- -d/|sort > sorted.txt
    ## find . -name "*png"|cut -f3- -d/|sort -u > uniq.txt 
    ## diff sorted.txt uniq.txt > difference.txt
    ## grep png difference.txt |cut -c3-|sort -u > files.txt
    ## find . -name "*png" |grep -f files.txt |rev|sort|rev
    ## 
    ## ./EasternLongIsland_2.tif/12/1210/2559.png
    ## ./NewYork_2.tif/12/1210/2559.png
    ## 
    ## ./HoustonSouth_2.tif/12/960/2399.png
    ## ./USGulfCoast_2.tif/12/960/2399.png
    ## 
    ## ./Baltimore_2.tif/12/1169/2529.png
    ## ./Washington_2.tif/12/1169/2529.png
    ## 
    ## ./LosAngelesEast_2.tif/12/704/2459.png
    ## ./LosAngelesWest_2.tif/12/704/2459.png

    
elif [[ ${PBS_ARRAYID} -eq 199 ]]; then
    ${TIME1} time.debug.txt ./gdal2tiles_512_parallel.py -t "DEBUG" ${OPTIONS1} -r lanczos plates.archive/1701/plates_MI/AZO/RNAV-GPS-RWY-17.pdf tiles/debug
    ## gdal_translate --config GDAL_PDF_DPI 150 -of Rasterlite RNAV-GPS-RWY-17.pdf RASTERLITE:my_db.sqlite,table=source -co DRIVER=WEBP
    ## find tiles/debug -name "*png"| xargs mogrify -unsharp 1x1 -format png8
    ## find tiles/debug -name "*png8"| xargs rename png8 png
    ## find tiles/debug -name "*png" |xargs -n1 -P16 optipng

    gdal_translate -of GPKG byte.tif byte.gpkg -co TILING_SCHEME=GoogleMapsCompatible -co RESAMPLING LANCZOS
fi

## 0 Sectional
## 1 TAC
## 2 WAC
## 3 IFR Low
## 4 IFR High
## 5 IFR Area
## 6 Terrain
## 7 Shaded Relief
## 8 Topographic
## 9 Heli/Other
## 10 Tactical Pilotage Chart/World
