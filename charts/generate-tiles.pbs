#!/bin/bash
#SBATCH --mem-per-cpu=2000
#SBATCH --ntasks=20
#SBATCH --time=1000:00:00
#SBATCH --job-name=tiles_%A_%a
#SBATCH --output=z-logs/generate-tiles_%A_%a.out
#SBATCH --error=z-logs/generate-tiles_%A_%a.out
#SBATCH --array=0,1,3-5,9

#!/bin/bash
# Copyright (c) 2015-2019, Peter A. Gustafson (peter.gustafson@wmich.edu)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with the
#   distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
# WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

echo "SLURM_JOBID: $SLURM_JOBID"
echo "SLURM_JOB_NODELIST: $SLURM_JOB_NODELIST"
echo "SLURM_NNODES: $SLURM_NNODES"
echo "SLURMTMPDIR: $SLURMTMPDIR"
echo "working directory = $SLURM_SUBMIT_DIR"



function updatevfr () {
    PNG=$0
    WBP=`echo ${PNG} |sed s/-build// | sed s/png/webp/ | sed s./dev/shm/..`

    if [[ ! -f ${WBP} || ${PNG} -nt ${WBP} ]] ; then
	D=`dirname ${WBP}`
	[[ ! -d ${D} ]] && mkdir -p ${D}
	echo Creating ${WBP}
	convert -unsharp 1x1 -format webp -define webp:method=6:thread-level=1 -quality 60 ${PNG} ${WBP}

	## Webp lossless
	## convert -format webp -define webp:lossless=true,method=6:thread-level=1 ${PNG} ${WBP}
    fi

    ## Create JPG, deprecated
    ## JPG=`echo ${WBP} |sed s/webp/jpg/`
    ## if [[ ! -f ${JPG} || ${PNG} -nt ${JPG} ]] ; then
    ## 	D=`dirname ${JPG}`
    ## 	[[ ! -d ${D} ]] && mkdir -p ${D}
    ## 	convert -unsharp 1x1 -background white -alpha off ${PNG} ppm:- | cjpeg -quality 85 > ${JPG}
    ## fi
}

function updateifr () {
    PNG=$0
    WBP=`echo ${PNG} |sed s/-build// | sed s/png/webp/`
    echo working on $PNG

    if [[ ! -f ${WBP} || ${PNG} -nt ${WBP} ]] ; then
	D=`dirname ${WBP}`
	[[ ! -d ${D} ]] && mkdir -p ${D}
	echo Creating ${WBP}
	convert -format webp -define webp:method=6:thread-level=1 -quality 60 ${PNG} ${WBP}
	## Webp lossless
	## convert -format webp -define webp:lossless=true,method=6:thread-level=1 ${PNG} ${WBP}
    fi
}

export -f updatevfr
export -f updateifr


NP=$((${SLURM_NTASKS}*2))
[[ ${SLURM_SUBMIT_DIR} ]] && cd ${SLURM_SUBMIT_DIR}

function myfindwac (){
    ## The purpose of this was to pick every other row and column to label with expired
    find /dev/shm/tiles/2 -name "*png"|
	while IFS=\/ read start dev shm tiles type layer lat img; do
	    lon=$(basename $img .png)
	    if [[ $((($lat + $lon) % 2)) -eq 0 ]]; then
		echo /$dev/$shm/$tiles/$type/$layer/$lat/$img
	    fi
	done
}

OPTIONS1="-x -w openlayers -c MUAVLLC --no-kml --resume --processes ${NP}"  ## --verbose
TIME1="/usr/bin/time -v --append -o"

function gentiles(){
    
    if [[ ${1} -eq 0 ]]; then
	rm -f time.sec.txt
	${TIME1} time.sec.txt make -f Makefile.sec -j ${SLURM_NTASKS}
	${TIME1} time.sec.txt nice ./gdal2tiles.py -t "VFR Sectional" ${OPTIONS1} -z 0-10 -r near sec.vrt /dev/shm/tiles/0-build
	
	rsync -rcv --del /dev/shm/tiles/0-build/ tiles/0-build/ --exclude=*.xml	
	rdfind -makehardlinks true -n false tiles/0-build
	find tiles/0-build -name "*png" | xargs -n1 -P${NP} bash -c updatevfr
	rdfind -makehardlinks true -n false tiles/0
	sed "s/type: 'png'/type: 'webp'/" /dev/shm/tiles/0-build/openlayers.html > tiles/0/openlayers.html
	rm -fr /dev/shm/tiles/0-build
	
	## Used to create manifest
	## for a in merge/sec/*tif; do 
	##     nice ./gdal2tiles.py -t "VFR Sectional" ${OPTIONS1} -z 0-10 --srcnodata=51 -r near $a /dev/shm/$a
	## done

	## Used to create manifest by state
	## for a in `ls shapefiles/state/*convexhull.geojson.vrt`; do
	##     nice ./gdal2tiles.py -t "VFR Sectional" ${OPTIONS1} -z 0-10 --srcnodata=51 -r near $a /dev/shm/$a
	## done
	    
    elif [[ ${1} -eq 1 ]]; then
	rm -f time.tac.txt
	${TIME1} time.tac.txt make -f Makefile.tac -j ${SLURM_NTASKS}
	${TIME1} time.tac.txt nice ./gdal2tiles.py -t "VFR Terminal Area" ${OPTIONS1} -z 0-11 --srcnodata=51 -r near tac.vrt /dev/shm/tiles/1-build
	
	rsync -rcv --del /dev/shm/tiles/1-build/ tiles/1-build/ --exclude=*.xml	
	rdfind -makehardlinks true -n false tiles/1-build
	find tiles/1-build -name "*png" | xargs -n1 -P${NP} bash -c updatevfr
	rdfind -makehardlinks true -n false tiles/1
	sed "s/type: 'png'/type: 'webp'/" /dev/shm/tiles/1-build/openlayers.html > tiles/1/openlayers.html
	rm -fr /dev/shm/tiles/1-build
	
	## for vrt in merge/tac/*.tif; do
	##     ${TIME1} time.tac.txt nice ./gdal2tiles.py -t "VFR Terminal Area" ${OPTIONS1} -r lanczos ${vrt} -z 7-11 /dev/shm/tiles/1/${vrt}
	## done

	## ${TIME1} time.tac.txt nice ./gdal2tiles.py -t "VFR Terminal Area" ${OPTIONS1} -z 0-11 -r cubicspline tac.vrt /dev/shm/tiles/1
	## rsync -avP --del /dev/shm/tiles/1/ tiles/1/ # --exclude=*.xml
	## rm -fr /dev/shm/tiles/1

	## Used to create manifest
	## for a in merge/tac/*tif; do 
	##     nice ./gdal2tiles.py -t "VFR Sectional" ${OPTIONS1} -z 0-11 --srcnodata=51 -r near $a /dev/shm/$a
	## done

    elif [[ ${1} -eq 2 ]]; then

	## WACS are out of date and haven't been updated using the new process!
	
	rm -f time.wac.txt
	${TIME1} time.wac.txt nice ./gdal2tiles.py -t "VFR World" ${OPTIONS1} -z 0-9 -r cubicspline wac.vrt /dev/shm/tiles/2
	
	## Remove xml
	find /dev/shm/tiles/2/ -name "*aux.xml"| xargs rm
	
	## Mark every other row and column as expired in a checkerboard pattern
	myfindwac | xargs -n 1 -P ${NP} mogrify -gravity center -pointsize 40 -fill white \
			  -draw "fill-opacity 0.20 rotate -45 text 0,0 'Expired'" -stroke red -strokewidth 1 

	sed "s/type: 'png'/type: 'webp'/" /dev/shm/tiles/2/ tiles/2/ --del
	rm -fr /dev/shm/tiles/2
	
    elif [[ ${1} -eq 3 ]]; then

	rm -f time.ifr.txt
	${TIME1} time.ifr.txt make -f Makefile.ifr -j ${SLURM_NTASKS}

	${TIME1} time.ifr.txt nice ./gdal2tiles.py -t "IFR Enroute Low" ${OPTIONS1} -z 0-10 -r near ifr-east.vrt /dev/shm/tiles/3-build
	${TIME1} time.ifr.txt nice ./gdal2tiles.py -t "IFR Enroute Low" ${OPTIONS1} -z 0-10 -r near ifr-west.vrt /dev/shm/tiles/3-build
	
	rsync -rcv --del /dev/shm/tiles/3-build/ tiles/3-build/ --exclude=*.xml
	rdfind -makehardlinks true -n false tiles/3-build
	find tiles/3-build -name "*png" | xargs -n1 -P${NP} bash -c updateifr
	rdfind -makehardlinks true -n false tiles/3
	sed "s/type: 'png'/type: 'webp'/" /dev/shm/tiles/3-build/openlayers.html > tiles/3/openlayers.html
	rm -fr /dev/shm/tiles/3-build

    elif [[ ${1} -eq 4 ]]; then

	make -C charts/ifr/ -j${SLURM_NTASKS} -f Makefile.ifh
	
	rm -f time.ifh.txt
	${TIME1} time.ifh.txt nice ./gdal2tiles.py -t "IFR Enroute High" ${OPTIONS1} -z 0-9 -r near ifh-east.vrt /dev/shm/tiles/4-build
	${TIME1} time.ifh.txt nice ./gdal2tiles.py -t "IFR Enroute High" ${OPTIONS1} -z 0-9 -r near ifh-west.vrt /dev/shm/tiles/4-build

	## Remove temporary files
	rm -fr /dev/shm/ENR_{H,A,P}*tif
	
	rsync -rcv --del /dev/shm/tiles/4-build/ tiles/4-build/ --exclude=*.xml
	rdfind -makehardlinks true -n false tiles/4-build
	find tiles/4-build -name "*png" | xargs -n1 -P${NP} bash -c updateifr
	rdfind -makehardlinks true -n false tiles/4
	sed "s/type: 'png'/type: 'webp'/" /dev/shm/tiles/4-build/openlayers.html > tiles/4/openlayers.html
	rm -fr /dev/shm/tiles/4-build

    elif [[ ${1} -eq 5 ]]; then
	rm -f time.ifa.txt

	## The images are sparse, only create those that are necessary
	for vrt in merge/ifa/*vrt; do
	    ${TIME1} time.ifa.txt nice ./gdal2tiles.py -t "IFR Area" ${OPTIONS1} -r lanczos ${vrt} -z 7-11 /dev/shm/tiles/5-build
	done
	
	## Extend Guam which stands completely isolated
	${TIME1} time.ifa.txt nice ./gdal2tiles.py -t "IFR Area" ${OPTIONS1} -r lanczos -z 0-11 merge/ifa/ENR_P01_GUA.vrt /dev/shm/tiles/5-build
	
	## Extend the rest... there were a total of 213 images at this level including guam.  ifa.vrt excludes guam
	${TIME1} time.ifa.txt nice ./gdal2tiles.py -t "IFR Area" ${OPTIONS1} -r lanczos -z 0-6 ifa.vrt /dev/shm/tiles/5-build
	
	## find /dev/shm/tiles/5 -name "*png"|xargs md5sum|grep 4023a0e7925b07a6be26e2cddb65f0cd|cut -f3 -d" "|xargs rm
	rsync -rcv --del /dev/shm/tiles/5-build/ tiles/5-build/ --exclude=*.xml
	rdfind -makehardlinks true -n false tiles/5-build
	find tiles/5-build -name "*png" | xargs -n1 -P${NP} bash -c updateifr
	rdfind -makehardlinks true -n false tiles/5
	sed "s/type: 'png'/type: 'webp'/" /dev/shm/tiles/5-build/openlayers.html > tiles/5/openlayers.html
	rm -fr /dev/shm/tiles/5

	## This was how level 6 was identified as the key level after creating tiles for individual images
	## find . -name "*png"|cut -f3- -d/|sort > sorted.txt
	## find . -name "*png"|cut -f3- -d/|sort -u > uniq.txt 
	## diff sorted.txt uniq.txt > difference.txt
	## grep png difference.txt |cut -c3-|sort -u > files.txt
	## find . -name "*png" |grep -f files.txt |rev|sort|rev|grep .vrt\/6

	## ${TIME1} time.ifa.txt nice ./gdal2tiles.py -t "IFR Area" ${OPTIONS1} -r lanczos -z 0-11 ifa.vrt /dev/shm/tiles/5
	## rsync -avP --exclude=*.xml /dev/shm/tiles/5/ tiles/5/ --del
	
    elif [[ ${1} -eq 9 ]]; then
	rm -f time.heli.txt
	make -C charts/hel -j${SLURM_NTASKS}
	
	HELI="
    charts/hel/BaltimoreWashington.vrt
    charts/hel/LosAngeles.vrt
    charts/hel/NewYork.vrt
    charts/hel/USGulfHouston.vrt
    charts/hel/Boston.tif
    charts/hel/Chicago.tif
    charts/hel/Dallas-FtWorth.tif
    charts/hel/Detroit.tif
    charts/hel/GrandCanyon.tif
    charts/hel/Houston.vrt
    "   

	## CREATE MANIFEST HELI="
	## CREATE MANIFEST charts/hel/Baltimore.tif
	## CREATE MANIFEST charts/hel/Boston.tif
	## CREATE MANIFEST charts/hel/Chicago.tif
	## CREATE MANIFEST charts/hel/Dallas-FtWorth.tif
	## CREATE MANIFEST charts/hel/Detroit.tif
	## CREATE MANIFEST charts/hel/GrandCanyonGeneralAviation.tif
	## CREATE MANIFEST charts/hel/USGulfCoast.tif
	## CREATE MANIFEST charts/hel/Washington.tif
	## CREATE MANIFEST charts/hel/Houston.vrt
	## CREATE MANIFEST charts/hel/LosAngeles.vrt
	## CREATE MANIFEST charts/hel/NewYork.vrt
	## CREATE MANIFEST charts/hel/Houston.vrt
	## CREATE MANIFEST "
	## CREATE MANIFEST 
	## CREATE MANIFEST echo starting heli
	## CREATE MANIFEST for FILE in ${HELI}; do
	## CREATE MANIFEST 	IMG=`basename ${FILE} .vrt`
	## CREATE MANIFEST 	IMG=`basename ${IMG} .tif`
	## CREATE MANIFEST 	if [[ ${IMG:0:11} == GrandCanyon ]]; then
	## CREATE MANIFEST 	    IMBASE=${IMG:0:11};
	## CREATE MANIFEST 	else
	## CREATE MANIFEST 	    IMBASE=${IMG}Heli
	## CREATE MANIFEST 	fi
	## CREATE MANIFEST 	
	## CREATE MANIFEST 	## The images are sparse, only create those that are necessary
	## CREATE MANIFEST 	echo Create manifest $IMBASE
	## CREATE MANIFEST 	echo Creating image ${vrt}
	## CREATE MANIFEST 	${TIME1} time.heli.txt nice ./gdal2tiles.py -t "Helicoptor Route Chart" ${OPTIONS1} -r near -z 0-12 ${FILE} /dev/shm/${IMBASE}
	## CREATE MANIFEST done

	echo Creating sparse tiles based on individual images
	for vrt in ${HELI}; do
	    echo Creating image ${vrt}
	    ${TIME1} time.heli.txt nice ./gdal2tiles.py -t "Helicoptor Route Chart" ${OPTIONS1} -r near -z 8-12 ${vrt} /dev/shm/tiles/9-build
	done

	echo Creating overview tiles based on all images
	${TIME1} time.heli.txt nice ./gdal2tiles.py -t "Helicoptor Route Chart" ${OPTIONS1} -r near -z 0-7 charts/hel/heli.vrt /dev/shm/tiles/9-build
	
	rsync -rcv --del /dev/shm/tiles/9-build/ tiles/9-build/ --exclude=*.xml	
	rdfind -makehardlinks true -n false tiles/9-build
	find tiles/9-build -name "*png" | xargs -n1 -P${NP} bash -c updatevfr
	rdfind -makehardlinks true -n false tiles/9
	sed "s/type: 'png'/type: 'webp'/" /dev/shm/tiles/tiles/9-build/openlayers.html > tiles/9/openlayers.html
	rm -fr /dev/shm/tiles/9-build	
	
	# rsync -avP --del /dev/shm/tiles/9/ tiles/9/
	# rm -fr /dev/shm/tiles/9
	
	## find . -name "*png"|cut -f3- -d/|sort > sorted.txt
	## find . -name "*png"|cut -f3- -d/|sort -u > uniq.txt 
	## diff sorted.txt uniq.txt > difference.txt
	## grep png difference.txt |cut -c3-|sort -u > files.txt
	## find . -name "*png" |grep -f files.txt |rev|sort|rev
	## 
	## ./EasternLongIsland_2.tif/12/1210/2559.png
	## ./NewYork_2.tif/12/1210/2559.png
	## 
	## ./HoustonSouth_2.tif/12/960/2399.png
	## ./USGulfCoast_2.tif/12/960/2399.png
	## 
	## ./Baltimore_2.tif/12/1169/2529.png
	## ./Washington_2.tif/12/1169/2529.png
	## 
	## ./LosAngelesEast_2.tif/12/704/2459.png
	## ./LosAngelesWest_2.tif/12/704/2459.png

    elif [[ ${1} -eq 13 ]]; then
	rm -f time.fly.txt
	${TIME1} time.fly.txt make -f Makefile.fly -j ${SLURM_NTASKS}
	${TIME1} time.fly.txt nice ./gdal2tiles.py -t "VFR Flyways" ${OPTIONS1} -z 0-11 --srcnodata=51 -r near fly.vrt /dev/shm/tiles/13-build
	
	rsync -rcv --del /dev/shm/tiles/13-build/ tiles/13-build/ --exclude=*.xml
	rdfind -makehardlinks true -n false tiles/13-build
	find tiles/13-build -name "*png" | xargs -n1 -P${NP} bash -c updatevfr
	rdfind -makehardlinks true -n false tiles/13
	sed "s/type: 'png'/type: 'webp'/" /dev/shm/tiles/13-build/openlayers.html > tiles/13/openlayers.html
	rm -fr /dev/shm/tiles/13-build
	
	## Used to create manifest
	## for a in merge/fly/*png; do 
	##     nice ./gdal2tiles.py -t "VFR Flyway" ${OPTIONS1} -z 0-11 --srcnodata=51 -r near $a /dev/shm/$a
	## done

	## Used to create manifest by state
	## for a in `ls shapefiles/state/*convexhull.geojson.vrt`; do
	##     nice ./gdal2tiles.py -t "VFR Flyway" ${OPTIONS1} -z 0-11 --srcnodata=51 -r near $a /dev/shm/$a
	## done
	    
	
    elif [[ ${1} -eq 199 ]]; then
	${TIME1} time.debug.txt nice ./gdal2tiles.py -t "DEBUG" ${OPTIONS1} -r lanczos plates.archive/1701/plates_MI/AZO/RNAV-GPS-RWY-17.pdf tiles/debug
	## gdal_translate --config GDAL_PDF_DPI 150 -of Rasterlite RNAV-GPS-RWY-17.pdf RASTERLITE:my_db.sqlite,table=source -co DRIVER=WEBP
	## find tiles/debug -name "*png"| xargs mogrify -unsharp 1x1 -format png8
	## find tiles/debug -name "*png8"| xargs rename png8 png
	## find tiles/debug -name "*png" |xargs -n1 -P16 optipng

	gdal_translate -of GPKG byte.tif byte.gpkg -co TILING_SCHEME=GoogleMapsCompatible -co RESAMPLING LANCZOS
    fi
}

gentiles ${SLURM_ARRAY_TASK_ID}
[[ -d /dev/shm/tiles ]] && rmdir --ignore-fail-on-non-empty /dev/shm/tiles

## 0 Sectional
## 1 TAC
## 2 WAC
## 3 IFR Low
## 4 IFR High
## 5 IFR Area
## 6 Terrain
## 7 Shaded Relief
## 8 Topographic
## 9 Heli/Other
## 10 ONC World
## 11 Tactical Pilotage Chart/World
## 12 Misc
## 13 Flyways
