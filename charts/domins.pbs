#!/bin/bash
#SBATCH --mem-per-cpu=2000
#SBATCH --ntasks=8
#SBATCH --time=1000:00:00
#SBATCH --job-name=Mins
#SBATCH --output=z-logs/Mins_%A_%a.out
#SBATCH --error=z-logs/Mins_%A_%a.out

# Copyright (c) 2012, Zubair Khan (governer@gmail.com)
# Copyright (c) 2013-2019, Peter A. Gustafson (peter.gustafson@wmich.edu)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with the
#   distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
# WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

if [[ ${SLURM_NTASKS} ]]; then
    NP=${SLURM_NTASKS}
else
    NP=`cat /proc/cpuinfo |grep processor|wc -l`
fi

echo "SLURM_JOBID: $SLURM_JOBID"
echo "SLURM_JOB_NODELIST: $SLURM_JOB_NODELIST"
echo "SLURM_NNODES: $SLURM_NNODES"
echo "SLURM_NTASKS: $SLURM_NTASKS"
echo "SLURMTMPDIR: $SLURMTMPDIR"
echo "working directory = $SLURM_SUBMIT_DIR"

[[ ${SLURM_SUBMIT_DIR} ]] && cd ${SLURM_SUBMIT_DIR}

CYCLE=`./cyclenumber.py`

REGNS="AK EC1 EC2 EC3 NC1 NC2 NC3 NE1 NE2 NE3 NE4 NW1 PAC SC1 SC2 SC3 SC4 SC5 SE1 SE2 SE3 SE4 SW1 SW2 SW3 SW4"

DPI=248.3 ## Ideal android limit 2400x
DPI=225

rm -rf mins
mkdir mins
cd mins

rm -f *.png
rm -f *.csv
rm -f *.txt
rm -f *.{PDF,pdf}
rm -rf minimums

echo Downloading TO and ALT mins
for REG in ${REGNS}; do
    cp -al ../plates/DDTPP/${CYCLE}/${REG}TO.{PDF,pdf} .
    cp -al ../plates/DDTPP/${CYCLE}/${REG}ALT.{PDF,pdf} .
done

rename pdf PDF *TO.pdf
rename pdf PDF *ALT.pdf

for REG in ${REGNS}; do
    [[ -f ${REG}TO.PDF ]]  || echo ${REG}TO.PDF not found.
    [[ -f ${REG}ALT.PDF ]] || echo ${REG}ALT.PDF not found.
done

echo Converting to png in parallel.
ls *TO.PDF |
    xargs -P ${NP} -n 1 mogrify -dither none -density ${DPI} -depth 8 -quality 00 -background white  -alpha remove -alpha off -colors 15 -format png 
ls *ALT.PDF |
    xargs -P ${NP} -n 1 mogrify -dither none -density ${DPI} -depth 8 -quality 00 -background white  -alpha remove -alpha off -colors 15 -format png

echo Converting to webp in parallel.
## ls *png |
##     xargs -P 16 -n1 mogrify -format webp -define webp:lossless=true,method=6
ls *TO.PDF |
    xargs -P ${NP} -n 1 mogrify -dither none -density ${DPI} -depth 8 -quality 00 -background white  -alpha remove -alpha off -colors 15 -format webp -define webp:lossless=true,method=6 
ls *ALT.PDF |
    xargs -P ${NP} -n 1 mogrify -dither none -density ${DPI} -depth 8 -quality 00 -background white  -alpha remove -alpha off -colors 15 -format webp -define webp:lossless=true,method=6


echo Optimizing
find . -name "*.png" | 
xargs -P ${NP} -n 1 nice optipng -quiet
wait

echo Creating database input files
for REG in ${REGNS}; do
    echo "../mins.sh ${REG}TO >> to.csv"
    ../mins.sh ${REG}TO >> to.csv
done

for REG in ${REGNS}; do
    echo "../mins.sh ${REG}ALT >> alt.csv"
    ../mins.sh ${REG}ALT >> alt.csv
done

mkdir minimums
mkdir minimums/A
mkdir minimums/E
mkdir minimums/N
mkdir minimums/P
mkdir minimums/S
mv A*.{png,webp} minimums/A
mv E*.{png,webp} minimums/E
mv N*.{png,webp} minimums/N
mv P*.{png,webp} minimums/P
mv S*.{png,webp} minimums/S

echo Zipping
for TYPE in png webp; do
    echo ${CYCLE} > alternates
    ls minimums/*/*${TYPE} >> alternates
    zip -9 alternates.zip alternates minimums/*/*${TYPE}
    
    [[ -d ../final_${TYPE} ]] || mkdir ../final_${TYPE}
    mv alternates.zip ../final_${TYPE}/.
done

cd ..
mv final_png/alternates.zip final/.
echo mins done
